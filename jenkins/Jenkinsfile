pipeline {
    agent {
        dockerfile {
            filename 'jenkins/Dockerfile.jenkinsAgent'
            additionalBuildArgs  '--build-arg JENKINSUID=`id -u jenkins` --build-arg JENKINSGID=`id -g jenkins` --build-arg DOCKERGID=`stat -c %g /var/run/docker.sock`'
            args '-v /var/run/docker.sock:/var/run/docker.sock -u jenkins:docker -p 3000:3000 --network="docker_docker"'
        }
    }
    stages {
        stage('INFO') {
            steps {
                sh 'docker images'
                sh 'docker network ls'
            }
        }
        stage('Clone') { 
            steps {
                dir ('repository') {
                    checkout(scm: [
                        $class: 'GitSCM', 
                        branches: [[name: 'develop']], 
                        userRemoteConfigs: [
                            [ url: 'https://github.com/dwengovzw/Blockly-for-Dwenguino.git' ]
                        ]
                    ])
                }
            }
        }
        stage('Install') { 
            steps {
                dir ('repository'){
                    sh 'npm install --legacy-peer-deps' 
                }
            }
        }
        //stage('Build') { 
        //    steps {
        //        dir ('repository'){
        //            sh 'npm run build-dev' 
        //        }
        //    }
        //}
        //stage('Test') { 
        //    steps {
        //        dir ('repository'){
        //            sh 'cp environments/test.env .env'
        //            sh 'npm run test' 
        //        }
        //        
        //    }
        //}
        stage('Deploy') { 
            steps {
                dir ('repository'){
                    sh 'touch Dockerfile'
                    sh 'echo "FROM blockly_development_server:latest" > Dockerfile'
                    sh 'echo "COPY . /home/node/deploy/" >> Dockerfile'
                    sh 'echo "CMD ls /home/node/deploy" >> Dockerfile'
                    sh 'echo "CMD bash /home/node/deploy/deploy/docker_deploy.sh" >> Dockerfile'
                    sh 'cat Dockerfile'
                    sh 'docker ps -q --filter "name=blockly_development_server" | xargs -r docker stop'
                    sh 'docker ps -aq --filter "name=blockly_development_server" | xargs -r docker rm'
                    sh 'docker build --no-cache -t blockly_development_server .'
                    sh 'docker run -d --name=blockly_development_server --restart=always --network="docker_docker" blockly_development_server'
                }
                
            }
        }
    }
}